// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: awadb.proto

package awadb_go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AwaDBServerClient is the client API for AwaDBServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AwaDBServerClient interface {
	Create(ctx context.Context, in *DBMeta, opts ...grpc.CallOption) (*ResponseStatus, error)
	DropDB(ctx context.Context, in *DBName, opts ...grpc.CallOption) (*ResponseStatus, error)
	DropTable(ctx context.Context, in *TableName, opts ...grpc.CallOption) (*ResponseStatus, error)
	ShowTables(ctx context.Context, in *DBName, opts ...grpc.CallOption) (*TableNames, error)
	DescTable(ctx context.Context, in *TableName, opts ...grpc.CallOption) (*TableMeta, error)
	AddFields(ctx context.Context, in *DBMeta, opts ...grpc.CallOption) (*ResponseStatus, error)
	AddOrUpdate(ctx context.Context, in *Documents, opts ...grpc.CallOption) (*ResponseStatus, error)
	Get(ctx context.Context, in *DocCondition, opts ...grpc.CallOption) (*Documents, error)
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	Delete(ctx context.Context, in *DocCondition, opts ...grpc.CallOption) (*ResponseStatus, error)
}

type awaDBServerClient struct {
	cc grpc.ClientConnInterface
}

func NewAwaDBServerClient(cc grpc.ClientConnInterface) AwaDBServerClient {
	return &awaDBServerClient{cc}
}

func (c *awaDBServerClient) Create(ctx context.Context, in *DBMeta, opts ...grpc.CallOption) (*ResponseStatus, error) {
	out := new(ResponseStatus)
	err := c.cc.Invoke(ctx, "/awadb_grpc.AwaDBServer/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *awaDBServerClient) DropDB(ctx context.Context, in *DBName, opts ...grpc.CallOption) (*ResponseStatus, error) {
	out := new(ResponseStatus)
	err := c.cc.Invoke(ctx, "/awadb_grpc.AwaDBServer/DropDB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *awaDBServerClient) DropTable(ctx context.Context, in *TableName, opts ...grpc.CallOption) (*ResponseStatus, error) {
	out := new(ResponseStatus)
	err := c.cc.Invoke(ctx, "/awadb_grpc.AwaDBServer/DropTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *awaDBServerClient) ShowTables(ctx context.Context, in *DBName, opts ...grpc.CallOption) (*TableNames, error) {
	out := new(TableNames)
	err := c.cc.Invoke(ctx, "/awadb_grpc.AwaDBServer/ShowTables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *awaDBServerClient) DescTable(ctx context.Context, in *TableName, opts ...grpc.CallOption) (*TableMeta, error) {
	out := new(TableMeta)
	err := c.cc.Invoke(ctx, "/awadb_grpc.AwaDBServer/DescTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *awaDBServerClient) AddFields(ctx context.Context, in *DBMeta, opts ...grpc.CallOption) (*ResponseStatus, error) {
	out := new(ResponseStatus)
	err := c.cc.Invoke(ctx, "/awadb_grpc.AwaDBServer/AddFields", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *awaDBServerClient) AddOrUpdate(ctx context.Context, in *Documents, opts ...grpc.CallOption) (*ResponseStatus, error) {
	out := new(ResponseStatus)
	err := c.cc.Invoke(ctx, "/awadb_grpc.AwaDBServer/AddOrUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *awaDBServerClient) Get(ctx context.Context, in *DocCondition, opts ...grpc.CallOption) (*Documents, error) {
	out := new(Documents)
	err := c.cc.Invoke(ctx, "/awadb_grpc.AwaDBServer/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *awaDBServerClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, "/awadb_grpc.AwaDBServer/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *awaDBServerClient) Delete(ctx context.Context, in *DocCondition, opts ...grpc.CallOption) (*ResponseStatus, error) {
	out := new(ResponseStatus)
	err := c.cc.Invoke(ctx, "/awadb_grpc.AwaDBServer/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AwaDBServerServer is the server API for AwaDBServer service.
// All implementations must embed UnimplementedAwaDBServerServer
// for forward compatibility
type AwaDBServerServer interface {
	Create(context.Context, *DBMeta) (*ResponseStatus, error)
	DropDB(context.Context, *DBName) (*ResponseStatus, error)
	DropTable(context.Context, *TableName) (*ResponseStatus, error)
	ShowTables(context.Context, *DBName) (*TableNames, error)
	DescTable(context.Context, *TableName) (*TableMeta, error)
	AddFields(context.Context, *DBMeta) (*ResponseStatus, error)
	AddOrUpdate(context.Context, *Documents) (*ResponseStatus, error)
	Get(context.Context, *DocCondition) (*Documents, error)
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
	Delete(context.Context, *DocCondition) (*ResponseStatus, error)
	mustEmbedUnimplementedAwaDBServerServer()
}

// UnimplementedAwaDBServerServer must be embedded to have forward compatible implementations.
type UnimplementedAwaDBServerServer struct {
}

func (UnimplementedAwaDBServerServer) Create(context.Context, *DBMeta) (*ResponseStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAwaDBServerServer) DropDB(context.Context, *DBName) (*ResponseStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropDB not implemented")
}
func (UnimplementedAwaDBServerServer) DropTable(context.Context, *TableName) (*ResponseStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropTable not implemented")
}
func (UnimplementedAwaDBServerServer) ShowTables(context.Context, *DBName) (*TableNames, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowTables not implemented")
}
func (UnimplementedAwaDBServerServer) DescTable(context.Context, *TableName) (*TableMeta, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescTable not implemented")
}
func (UnimplementedAwaDBServerServer) AddFields(context.Context, *DBMeta) (*ResponseStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFields not implemented")
}
func (UnimplementedAwaDBServerServer) AddOrUpdate(context.Context, *Documents) (*ResponseStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrUpdate not implemented")
}
func (UnimplementedAwaDBServerServer) Get(context.Context, *DocCondition) (*Documents, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedAwaDBServerServer) Search(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedAwaDBServerServer) Delete(context.Context, *DocCondition) (*ResponseStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAwaDBServerServer) mustEmbedUnimplementedAwaDBServerServer() {}

// UnsafeAwaDBServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AwaDBServerServer will
// result in compilation errors.
type UnsafeAwaDBServerServer interface {
	mustEmbedUnimplementedAwaDBServerServer()
}

func RegisterAwaDBServerServer(s grpc.ServiceRegistrar, srv AwaDBServerServer) {
	s.RegisterService(&AwaDBServer_ServiceDesc, srv)
}

func _AwaDBServer_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DBMeta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AwaDBServerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/awadb_grpc.AwaDBServer/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AwaDBServerServer).Create(ctx, req.(*DBMeta))
	}
	return interceptor(ctx, in, info, handler)
}

func _AwaDBServer_DropDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DBName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AwaDBServerServer).DropDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/awadb_grpc.AwaDBServer/DropDB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AwaDBServerServer).DropDB(ctx, req.(*DBName))
	}
	return interceptor(ctx, in, info, handler)
}

func _AwaDBServer_DropTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TableName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AwaDBServerServer).DropTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/awadb_grpc.AwaDBServer/DropTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AwaDBServerServer).DropTable(ctx, req.(*TableName))
	}
	return interceptor(ctx, in, info, handler)
}

func _AwaDBServer_ShowTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DBName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AwaDBServerServer).ShowTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/awadb_grpc.AwaDBServer/ShowTables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AwaDBServerServer).ShowTables(ctx, req.(*DBName))
	}
	return interceptor(ctx, in, info, handler)
}

func _AwaDBServer_DescTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TableName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AwaDBServerServer).DescTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/awadb_grpc.AwaDBServer/DescTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AwaDBServerServer).DescTable(ctx, req.(*TableName))
	}
	return interceptor(ctx, in, info, handler)
}

func _AwaDBServer_AddFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DBMeta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AwaDBServerServer).AddFields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/awadb_grpc.AwaDBServer/AddFields",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AwaDBServerServer).AddFields(ctx, req.(*DBMeta))
	}
	return interceptor(ctx, in, info, handler)
}

func _AwaDBServer_AddOrUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Documents)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AwaDBServerServer).AddOrUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/awadb_grpc.AwaDBServer/AddOrUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AwaDBServerServer).AddOrUpdate(ctx, req.(*Documents))
	}
	return interceptor(ctx, in, info, handler)
}

func _AwaDBServer_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DocCondition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AwaDBServerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/awadb_grpc.AwaDBServer/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AwaDBServerServer).Get(ctx, req.(*DocCondition))
	}
	return interceptor(ctx, in, info, handler)
}

func _AwaDBServer_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AwaDBServerServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/awadb_grpc.AwaDBServer/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AwaDBServerServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AwaDBServer_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DocCondition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AwaDBServerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/awadb_grpc.AwaDBServer/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AwaDBServerServer).Delete(ctx, req.(*DocCondition))
	}
	return interceptor(ctx, in, info, handler)
}

// AwaDBServer_ServiceDesc is the grpc.ServiceDesc for AwaDBServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AwaDBServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "awadb_grpc.AwaDBServer",
	HandlerType: (*AwaDBServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _AwaDBServer_Create_Handler,
		},
		{
			MethodName: "DropDB",
			Handler:    _AwaDBServer_DropDB_Handler,
		},
		{
			MethodName: "DropTable",
			Handler:    _AwaDBServer_DropTable_Handler,
		},
		{
			MethodName: "ShowTables",
			Handler:    _AwaDBServer_ShowTables_Handler,
		},
		{
			MethodName: "DescTable",
			Handler:    _AwaDBServer_DescTable_Handler,
		},
		{
			MethodName: "AddFields",
			Handler:    _AwaDBServer_AddFields_Handler,
		},
		{
			MethodName: "AddOrUpdate",
			Handler:    _AwaDBServer_AddOrUpdate_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _AwaDBServer_Get_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _AwaDBServer_Search_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AwaDBServer_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "awadb.proto",
}
